// Mocks generated by Mockito 5.4.6 from annotations
// in client_service/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:io' as _i8;

import 'package:client_service/models/camara.dart' as _i12;
import 'package:client_service/models/cliente.dart' as _i4;
import 'package:client_service/models/empleado.dart' as _i7;
import 'package:client_service/models/factura.dart' as _i10;
import 'package:client_service/models/instalacion.dart' as _i16;
import 'package:client_service/models/vehiculo.dart' as _i14;
import 'package:client_service/repositories/camara_repository.dart' as _i11;
import 'package:client_service/repositories/cliente_repository.dart' as _i2;
import 'package:client_service/repositories/empleado_repository.dart' as _i6;
import 'package:client_service/repositories/factura_repository.dart' as _i9;
import 'package:client_service/repositories/instalacion_repository.dart'
    as _i15;
import 'package:client_service/repositories/vehiculo_repository.dart' as _i13;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ClienteRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockClienteRepository extends _i1.Mock implements _i2.ClienteRepository {
  MockClienteRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Cliente>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Cliente>>.value(<_i4.Cliente>[]),
      ) as _i3.Future<List<_i4.Cliente>>);

  @override
  _i3.Future<_i4.Cliente?> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i3.Future<_i4.Cliente?>.value(),
      ) as _i3.Future<_i4.Cliente?>);

  @override
  _i3.Future<String> create(_i4.Cliente? cliente) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [cliente],
        ),
        returnValue: _i3.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #create,
            [cliente],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<void> update(
    String? id,
    _i4.Cliente? cliente,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [
            id,
            cliente,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Stream<List<_i4.Cliente>> watchAll() => (super.noSuchMethod(
        Invocation.method(
          #watchAll,
          [],
        ),
        returnValue: _i3.Stream<List<_i4.Cliente>>.empty(),
      ) as _i3.Stream<List<_i4.Cliente>>);

  @override
  _i3.Future<List<Map<String, dynamic>>> getAllForExport() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllForExport,
          [],
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);
}

/// A class which mocks [EmpleadoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockEmpleadoRepository extends _i1.Mock
    implements _i6.EmpleadoRepository {
  MockEmpleadoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i7.Empleado>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i3.Future<List<_i7.Empleado>>.value(<_i7.Empleado>[]),
      ) as _i3.Future<List<_i7.Empleado>>);

  @override
  _i3.Future<_i7.Empleado?> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i3.Future<_i7.Empleado?>.value(),
      ) as _i3.Future<_i7.Empleado?>);

  @override
  _i3.Future<String> create(_i7.Empleado? empleado) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [empleado],
        ),
        returnValue: _i3.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #create,
            [empleado],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<String> createWithImage(
    _i7.Empleado? empleado,
    _i8.File? imageFile,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createWithImage,
          [
            empleado,
            imageFile,
          ],
        ),
        returnValue: _i3.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #createWithImage,
            [
              empleado,
              imageFile,
            ],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<void> update(
    String? id,
    _i7.Empleado? empleado,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [
            id,
            empleado,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updateWithImage(
    String? id,
    _i7.Empleado? empleado,
    _i8.File? newImage,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateWithImage,
          [
            id,
            empleado,
            newImage,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Stream<List<_i7.Empleado>> watchAll() => (super.noSuchMethod(
        Invocation.method(
          #watchAll,
          [],
        ),
        returnValue: _i3.Stream<List<_i7.Empleado>>.empty(),
      ) as _i3.Stream<List<_i7.Empleado>>);

  @override
  _i3.Future<List<Map<String, dynamic>>> getAllForExport() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllForExport,
          [],
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<List<_i7.Empleado>> getAllByDateRange({
    DateTime? startDate,
    DateTime? endDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllByDateRange,
          [],
          {
            #startDate: startDate,
            #endDate: endDate,
          },
        ),
        returnValue: _i3.Future<List<_i7.Empleado>>.value(<_i7.Empleado>[]),
      ) as _i3.Future<List<_i7.Empleado>>);

  @override
  _i3.Future<List<Map<String, dynamic>>> getAllForExportWithDateFilter({
    DateTime? startDate,
    DateTime? endDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllForExportWithDateFilter,
          [],
          {
            #startDate: startDate,
            #endDate: endDate,
          },
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);
}

/// A class which mocks [FacturaRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFacturaRepository extends _i1.Mock implements _i9.FacturaRepository {
  MockFacturaRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i10.Factura>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i3.Future<List<_i10.Factura>>.value(<_i10.Factura>[]),
      ) as _i3.Future<List<_i10.Factura>>);

  @override
  _i3.Future<_i10.Factura?> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i3.Future<_i10.Factura?>.value(),
      ) as _i3.Future<_i10.Factura?>);

  @override
  _i3.Future<String> create(_i10.Factura? factura) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [factura],
        ),
        returnValue: _i3.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #create,
            [factura],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<void> update(
    String? id,
    _i10.Factura? factura,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [
            id,
            factura,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Stream<List<_i10.Factura>> watchAll() => (super.noSuchMethod(
        Invocation.method(
          #watchAll,
          [],
        ),
        returnValue: _i3.Stream<List<_i10.Factura>>.empty(),
      ) as _i3.Stream<List<_i10.Factura>>);

  @override
  _i3.Future<List<_i10.Factura>> getByClienteId(String? clienteId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByClienteId,
          [clienteId],
        ),
        returnValue: _i3.Future<List<_i10.Factura>>.value(<_i10.Factura>[]),
      ) as _i3.Future<List<_i10.Factura>>);

  @override
  _i3.Future<List<_i10.Factura>> getByTipoServicio(
          _i10.TipoServicio? tipoServicio) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByTipoServicio,
          [tipoServicio],
        ),
        returnValue: _i3.Future<List<_i10.Factura>>.value(<_i10.Factura>[]),
      ) as _i3.Future<List<_i10.Factura>>);

  @override
  _i3.Future<List<_i10.Factura>> getByEstado(_i10.EstadoFactura? estado) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByEstado,
          [estado],
        ),
        returnValue: _i3.Future<List<_i10.Factura>>.value(<_i10.Factura>[]),
      ) as _i3.Future<List<_i10.Factura>>);

  @override
  _i3.Future<List<_i10.Factura>> getByFechaRange({
    DateTime? fechaInicio,
    DateTime? fechaFin,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByFechaRange,
          [],
          {
            #fechaInicio: fechaInicio,
            #fechaFin: fechaFin,
          },
        ),
        returnValue: _i3.Future<List<_i10.Factura>>.value(<_i10.Factura>[]),
      ) as _i3.Future<List<_i10.Factura>>);

  @override
  _i3.Future<List<_i10.Factura>> getFacturasVencidas() => (super.noSuchMethod(
        Invocation.method(
          #getFacturasVencidas,
          [],
        ),
        returnValue: _i3.Future<List<_i10.Factura>>.value(<_i10.Factura>[]),
      ) as _i3.Future<List<_i10.Factura>>);

  @override
  _i3.Future<String> generateNumeroFactura() => (super.noSuchMethod(
        Invocation.method(
          #generateNumeroFactura,
          [],
        ),
        returnValue: _i3.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #generateNumeroFactura,
            [],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<void> updateEstado(
    String? id,
    _i10.EstadoFactura? nuevoEstado,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateEstado,
          [
            id,
            nuevoEstado,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<Map<String, dynamic>> getEstadisticas({
    DateTime? fechaInicio,
    DateTime? fechaFin,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEstadisticas,
          [],
          {
            #fechaInicio: fechaInicio,
            #fechaFin: fechaFin,
          },
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<List<Map<String, dynamic>>> getAllForExport({
    DateTime? fechaInicio,
    DateTime? fechaFin,
    _i10.EstadoFactura? estado,
    _i10.TipoServicio? tipoServicio,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllForExport,
          [],
          {
            #fechaInicio: fechaInicio,
            #fechaFin: fechaFin,
            #estado: estado,
            #tipoServicio: tipoServicio,
          },
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);
}

/// A class which mocks [CamaraRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCamaraRepository extends _i1.Mock implements _i11.CamaraRepository {
  MockCamaraRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i12.Camara>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i3.Future<List<_i12.Camara>>.value(<_i12.Camara>[]),
      ) as _i3.Future<List<_i12.Camara>>);

  @override
  _i3.Future<_i12.Camara?> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i3.Future<_i12.Camara?>.value(),
      ) as _i3.Future<_i12.Camara?>);

  @override
  _i3.Future<String> create(_i12.Camara? camara) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [camara],
        ),
        returnValue: _i3.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #create,
            [camara],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<void> update(
    String? id,
    _i12.Camara? camara,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [
            id,
            camara,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Stream<List<_i12.Camara>> watchAll() => (super.noSuchMethod(
        Invocation.method(
          #watchAll,
          [],
        ),
        returnValue: _i3.Stream<List<_i12.Camara>>.empty(),
      ) as _i3.Stream<List<_i12.Camara>>);

  @override
  _i3.Future<List<Map<String, dynamic>>> getAllForExport() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllForExport,
          [],
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<List<_i12.Camara>> getAllByDateRange({
    DateTime? startDate,
    DateTime? endDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllByDateRange,
          [],
          {
            #startDate: startDate,
            #endDate: endDate,
          },
        ),
        returnValue: _i3.Future<List<_i12.Camara>>.value(<_i12.Camara>[]),
      ) as _i3.Future<List<_i12.Camara>>);

  @override
  _i3.Future<List<Map<String, dynamic>>> getAllForExportWithDateFilter({
    DateTime? startDate,
    DateTime? endDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllForExportWithDateFilter,
          [],
          {
            #startDate: startDate,
            #endDate: endDate,
          },
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<void> cancelar(
    String? id,
    String? motivo,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelar,
          [
            id,
            motivo,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> retomar(String? id) => (super.noSuchMethod(
        Invocation.method(
          #retomar,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> cambiarEstado(
    String? id,
    String? nuevoEstado,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cambiarEstado,
          [
            id,
            nuevoEstado,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i12.Camara>> getByEstado(String? estado) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByEstado,
          [estado],
        ),
        returnValue: _i3.Future<List<_i12.Camara>>.value(<_i12.Camara>[]),
      ) as _i3.Future<List<_i12.Camara>>);
}

/// A class which mocks [VehiculoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockVehiculoRepository extends _i1.Mock
    implements _i13.VehiculoRepository {
  MockVehiculoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i14.Alquiler>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i3.Future<List<_i14.Alquiler>>.value(<_i14.Alquiler>[]),
      ) as _i3.Future<List<_i14.Alquiler>>);

  @override
  _i3.Future<_i14.Alquiler?> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i3.Future<_i14.Alquiler?>.value(),
      ) as _i3.Future<_i14.Alquiler?>);

  @override
  _i3.Future<String> create(_i14.Alquiler? alquiler) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [alquiler],
        ),
        returnValue: _i3.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #create,
            [alquiler],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<void> update(
    String? id,
    _i14.Alquiler? alquiler,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [
            id,
            alquiler,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Stream<List<_i14.Alquiler>> watchAll() => (super.noSuchMethod(
        Invocation.method(
          #watchAll,
          [],
        ),
        returnValue: _i3.Stream<List<_i14.Alquiler>>.empty(),
      ) as _i3.Stream<List<_i14.Alquiler>>);

  @override
  _i3.Future<List<Map<String, dynamic>>> getAllForExport() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllForExport,
          [],
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<List<_i14.Alquiler>> getAllByReservaDateRange({
    DateTime? startDate,
    DateTime? endDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllByReservaDateRange,
          [],
          {
            #startDate: startDate,
            #endDate: endDate,
          },
        ),
        returnValue: _i3.Future<List<_i14.Alquiler>>.value(<_i14.Alquiler>[]),
      ) as _i3.Future<List<_i14.Alquiler>>);

  @override
  _i3.Future<List<_i14.Alquiler>> getAllByTrabajoDateRange({
    DateTime? startDate,
    DateTime? endDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllByTrabajoDateRange,
          [],
          {
            #startDate: startDate,
            #endDate: endDate,
          },
        ),
        returnValue: _i3.Future<List<_i14.Alquiler>>.value(<_i14.Alquiler>[]),
      ) as _i3.Future<List<_i14.Alquiler>>);

  @override
  _i3.Future<List<Map<String, dynamic>>> getAllForExportWithReservaDateFilter({
    DateTime? startDate,
    DateTime? endDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllForExportWithReservaDateFilter,
          [],
          {
            #startDate: startDate,
            #endDate: endDate,
          },
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<List<Map<String, dynamic>>> getAllForExportWithTrabajoDateFilter({
    DateTime? startDate,
    DateTime? endDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllForExportWithTrabajoDateFilter,
          [],
          {
            #startDate: startDate,
            #endDate: endDate,
          },
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<void> cancelarAlquiler(
    String? id,
    String? motivo,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelarAlquiler,
          [
            id,
            motivo,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> retomarAlquiler(String? id) => (super.noSuchMethod(
        Invocation.method(
          #retomarAlquiler,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> cambiarEstado(
    String? id,
    _i14.EstadoAlquiler? nuevoEstado,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cambiarEstado,
          [
            id,
            nuevoEstado,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i14.Alquiler>> getAllByEstado(_i14.EstadoAlquiler? estado) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllByEstado,
          [estado],
        ),
        returnValue: _i3.Future<List<_i14.Alquiler>>.value(<_i14.Alquiler>[]),
      ) as _i3.Future<List<_i14.Alquiler>>);

  @override
  _i3.Future<List<_i14.Alquiler>> getAllByEstados(
          List<_i14.EstadoAlquiler>? estados) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllByEstados,
          [estados],
        ),
        returnValue: _i3.Future<List<_i14.Alquiler>>.value(<_i14.Alquiler>[]),
      ) as _i3.Future<List<_i14.Alquiler>>);

  @override
  _i3.Stream<List<_i14.Alquiler>> watchByEstado(_i14.EstadoAlquiler? estado) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchByEstado,
          [estado],
        ),
        returnValue: _i3.Stream<List<_i14.Alquiler>>.empty(),
      ) as _i3.Stream<List<_i14.Alquiler>>);
}

/// A class which mocks [InstalacionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockInstalacionRepository extends _i1.Mock
    implements _i15.InstalacionRepository {
  MockInstalacionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i16.Instalacion>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue:
            _i3.Future<List<_i16.Instalacion>>.value(<_i16.Instalacion>[]),
      ) as _i3.Future<List<_i16.Instalacion>>);

  @override
  _i3.Future<_i16.Instalacion?> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i3.Future<_i16.Instalacion?>.value(),
      ) as _i3.Future<_i16.Instalacion?>);

  @override
  _i3.Future<String> create(_i16.Instalacion? instalacion) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [instalacion],
        ),
        returnValue: _i3.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #create,
            [instalacion],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<void> update(
    String? id,
    _i16.Instalacion? instalacion,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [
            id,
            instalacion,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Stream<List<_i16.Instalacion>> watchAll() => (super.noSuchMethod(
        Invocation.method(
          #watchAll,
          [],
        ),
        returnValue: _i3.Stream<List<_i16.Instalacion>>.empty(),
      ) as _i3.Stream<List<_i16.Instalacion>>);

  @override
  _i3.Future<List<Map<String, dynamic>>> getAllForExport() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllForExport,
          [],
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<List<_i16.Instalacion>> getAllByDateRange({
    DateTime? startDate,
    DateTime? endDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllByDateRange,
          [],
          {
            #startDate: startDate,
            #endDate: endDate,
          },
        ),
        returnValue:
            _i3.Future<List<_i16.Instalacion>>.value(<_i16.Instalacion>[]),
      ) as _i3.Future<List<_i16.Instalacion>>);

  @override
  _i3.Future<List<Map<String, dynamic>>> getAllForExportWithDateFilter({
    DateTime? startDate,
    DateTime? endDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllForExportWithDateFilter,
          [],
          {
            #startDate: startDate,
            #endDate: endDate,
          },
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<void> cancelar(
    String? id,
    String? motivo,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelar,
          [
            id,
            motivo,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> retomar(String? id) => (super.noSuchMethod(
        Invocation.method(
          #retomar,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> cambiarEstado(
    String? id,
    String? nuevoEstado,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cambiarEstado,
          [
            id,
            nuevoEstado,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i16.Instalacion>> getByEstado(String? estado) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByEstado,
          [estado],
        ),
        returnValue:
            _i3.Future<List<_i16.Instalacion>>.value(<_i16.Instalacion>[]),
      ) as _i3.Future<List<_i16.Instalacion>>);
}
